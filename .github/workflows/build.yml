name: MSBuild - Multi-Arch

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x86, x64, ARM, ARM64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      run: nuget restore GTFractals.sln

    - name: Build Solution
      run: msbuild GTFractals.sln /m /p:Configuration=Release /p:Platform=${{ matrix.platform }} /t:GTFractals /verbosity:minimal

    - name: Debug file structure (if build fails)
      if: failure()
      run: Get-ChildItem -Recurse D:\a\GTFractals\GTFractals\
      shell: pwsh

    - name: Create artifacts directory
      run: mkdir -p artifacts
      shell: pwsh

    - name: Find and Copy Executables
      run: |
        $exePath = Get-ChildItem -Path D:\a\GTFractals\GTFractals\ -Filter "GTFractals.exe" -Recurse | Select-Object -ExpandProperty FullName
        if ($exePath) {
          Copy-Item -Path $exePath -Destination "artifacts/GTFractals_${{ matrix.platform }}.exe"
          Write-Host "Copied: $exePath"
        } else {
          Write-Host "ERROR: GTFractals.exe not found!"
          exit 1
        }
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GTFractals-${{ matrix.platform }}
        path: artifacts/GTFractals_${{ matrix.platform }}.exe
        if-no-files-found: error

  tag_and_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate Tag
      id: tag
      run: |
        TAG_NAME=v0.1.${{ github.run_number }}
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "tag=$TAG_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Create GitHub Tag
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git tag $TAG_NAME
        git push https://x-access-token:${{ secrets.PAT }}@github.com/getangar/GTFractals.git $TAG_NAME
      env:
        PAT: ${{ secrets.PAT }}


    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: Release ${{ env.TAG_NAME }}
        generate_release_notes: true
        files: artifacts/**/*
        body: "Automated release for GTFractals"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Fetch Release Notes
      id: release_notes
      run: |
        CHANGES=$(gh api repos/${{ github.repository }}/releases/latest --jq '.body')
          
        if [[ -z "$CHANGES" ]]; then
          echo "CHANGES=Automated Release Notes" >> $GITHUB_ENV
        else
          echo "CHANGES<<EOF" >> $GITHUB_ENV
          echo "$CHANGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

    - name: Install GitHub CLI
      run: sudo apt update && sudo apt install -y gh
      
    - name: Set GitHub Token
      run: echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      
    - name: Get Repository ID
      run: |
        REPOSITORY_ID=$(gh api graphql -H "Authorization: bearer $GH_TOKEN" -f query='
        query {
          repository(owner: "getangar", name: "GTFractals") {
            id
          }
        }' --jq '.data.repository.id')
      
        echo "Repository ID: $REPOSITORY_ID"
        echo "REPOSITORY_ID=$REPOSITORY_ID" >> $GITHUB_ENV
      
    - name: Get Discussion Category ID
      run: |
        DISCUSSION_ID=$(gh api graphql -H "Authorization: bearer $GH_TOKEN" -f query='
        query {
          repository(owner: "getangar", name: "GTFractals") {
            discussionCategories(first: 10) {
              nodes {
                id
                name
              }
            }
          }
        }' --jq '.data.repository.discussionCategories.nodes[] | select(.name=="Announcements") | .id')
      
        echo "Discussion Category ID: $DISCUSSION_ID"
        echo "DISCUSSION_ID=$DISCUSSION_ID" >> $GITHUB_ENV
      
    - name: Create GitHub Discussion
      run: |
        echo "Creating discussion with title: Release $TAG_NAME"
        echo "Discussion body: $CHANGES"
      
        PAYLOAD=$(jq -n --arg title "Release $TAG_NAME" \
                        --arg body "$CHANGES" \
                        --arg categoryId "$DISCUSSION_ID" \
                        --arg repoId "$REPOSITORY_ID" \
                  '{query: "mutation($repoId: ID!, $title: String!, $body: String!, $categoryId: ID!) {
                    createDiscussion(input: {repositoryId: $repoId, title: $title, body: $body, categoryId: $categoryId}) {
                      discussion {
                        id
                      }
                    }
                  }", variables: {repoId: $repoId, title: $title, body: $body, categoryId: $categoryId}}')
      
        echo "Payload JSON: $PAYLOAD"
      
        curl -X POST https://api.github.com/graphql \
          -H "Authorization: bearer $GH_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD"